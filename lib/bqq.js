// Generated by CoffeeScript 1.6.3
(function() {
  var BQQ, path, qs, request;

  qs = require('querystring');

  path = require('path');

  request = require('request');

  BQQ = (function() {
    BQQ.init = function(options) {
      this.name = options.name, this.key = options.key, this.secret = options.secret, this.ip = options.ip, this.start = options.start;
      this.url = 'openapi.b.qq.com';
      this.initialized = true;
      return this;
    };

    BQQ.getToken = function(code, state, callback) {
      return this.fetch('GET', 'oauth2/token', {
        grant_type: "authorization_code",
        app_id: this.key,
        app_secret: this.secret,
        code: code,
        state: state,
        redirect_uri: this.start
      }, callback);
    };

    BQQ.authURL = function() {
      return "https://" + this.url + "/oauth2/authorize?" + qs.stringify({
        response_type: 'code',
        app_id: this.key,
        redirect_uri: this.start,
        state: 1
      });
    };

    BQQ.fetch = function(method, cmd, query, callback) {
      return request({
        method: method,
        url: "https://" + (path.join(this.url, cmd)) + "?" + (qs.stringify(query))
      }, function(err, res, body) {
        var data, e;
        try {
          data = JSON.parse(body);
        } catch (_error) {
          e = _error;
          return callback(e);
        }
        return callback(null, data);
      });
    };

    function BQQ(options) {
      if (!BQQ.initialized) {
        return;
      }
      this.token = options.token, this.refreshToken = options.refreshToken, this.companyId = options.companyId;
    }

    BQQ.prototype.baseParams = function() {
      return {
        access_token: this.token,
        company_id: this.companyId,
        app_id: BQQ.key,
        client_ip: BQQ.ip,
        oauth_version: 2
      };
    };

    BQQ.prototype.companyInfo = function(callback) {
      return BQQ.fetch('GET', 'api/corporation/get', this.baseParams(), callback);
    };

    BQQ.prototype.memberList = function(callback) {
      var query;
      query = this.baseParams();
      query.timestamp = 0;
      return BQQ.fetch('GET', 'api/user/list', query, callback);
    };

    BQQ.prototype.face = function(openIds, callback) {
      var query;
      query = this.baseParams();
      query.open_ids = openIds;
      query.type_id = 5;
      return BQQ.fetch('GET', 'api/user/face', query, callback);
    };

    BQQ.prototype.email = function(openIds, callback) {
      var query;
      query = this.baseParams();
      query.open_ids = openIds;
      return BQQ.fetch('GET', 'api/user/email', query, callback);
    };

    BQQ.prototype.qq = function(openIds, callback) {
      var query;
      query = this.baseParams();
      query.open_ids = openIds;
      return BQQ.fetch('GET', 'api/user/qq', query, callback);
    };

    BQQ.prototype.tips = function(params, callback) {
      var content, query, receivers, title, url;
      if (callback == null) {
        callback = function() {};
      }
      receivers = params.receivers, title = params.title, content = params.content, url = params.url;
      query = this.baseParams();
      if (receivers) {
        query.receivers = receivers;
      } else {
        query.to_all = 1;
      }
      query.window_title = BQQ.name;
      query.tips_title = title;
      query.tips_content = content;
      if (url) {
        query.tips_url = url;
      }
      return BQQ.fetch('POST', 'api/tips/send', query, callback);
    };

    BQQ.prototype.verifyhashskey = function(options, callback) {
      var params;
      params = this.baseParams();
      params.open_id = options.open_id;
      params.hashskey = options.hashskey;
      return BQQ.fetch('GET', 'api/login/verifyhashskey', params, callback);
    };

    BQQ.prototype.refresh = function(callback) {
      var query;
      query = {
        refresh_token: this.refreshToken,
        app_id: BQQ.key,
        app_secret: BQQ.secret
      };
      return BQQ.fetch('GET', 'oauth2/refresh', query, function(err, data) {
        if (err) {
          return callback(err);
        }
        if (data.ret > 0) {
          return callback(data);
        }
        this.token = data.data.access_token;
        this.refreshToken = data.data.refresh_token;
        return callback(null, data.data);
      });
    };

    return BQQ;

  })();

  module.exports = BQQ;

}).call(this);
